# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yt12OU9BxPztuFXAQXseUwNObsLmbZt3
"""

# Logistic Regression Comparison: Basic, Scaled, SMOTE, SMOTE+Scaled

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt

# Load and preprocess dataset
df = pd.read_csv('sample_logistic_data.csv')
df['Purchased'] = df['Purchased'].map({'Yes': 1, 'No': 0})  # Encode target
X = df[['Age', 'Salary']]
y = df['Purchased']

print("===== ORIGINAL DATA LOADED =====")
print(df.head())

# ====================== 1. BASIC LOGISTIC REGRESSION ======================
print("\n=== 1. Basic Logistic Regression ===")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model_basic = LogisticRegression()
model_basic.fit(X_train, y_train)
y_pred_basic = model_basic.predict(X_test)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_basic))
print("Classification Report:")
print(classification_report(y_test, y_pred_basic))
print("Accuracy Score:", accuracy_score(y_test, y_pred_basic))

# ====================== 2. LOGISTIC REGRESSION WITH SCALING ======================
print("\n=== 2. Logistic Regression with Feature Scaling ===")
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model_scaled = LogisticRegression()
model_scaled.fit(X_train_scaled, y_train)
y_pred_scaled = model_scaled.predict(X_test_scaled)

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_scaled))
print("Classification Report:")
print(classification_report(y_test, y_pred_scaled))
print("Accuracy Score:", accuracy_score(y_test, y_pred_scaled))

# ====================== 3. LOGISTIC REGRESSION WITH SMOTE ======================
print("\n=== 3. Logistic Regression with SMOTE (No Scaling) ===")
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Optional: visualize before/after
plt.figure(figsize=(6, 4))
y.value_counts().plot(kind='bar', color=['lightcoral', 'lightgreen'])
plt.title("Target Distribution Before SMOTE")
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])
plt.show()

plt.figure(figsize=(6, 4))
y_resampled.value_counts().plot(kind='bar', color=['skyblue', 'orange'])
plt.title("Target Distribution After SMOTE")
plt.xticks(ticks=[0, 1], labels=['No', 'Yes'])
plt.show()

X_train_res, X_test_res, y_train_res, y_test_res = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42
)

model_smote = LogisticRegression()
model_smote.fit(X_train_res, y_train_res)
y_pred_smote = model_smote.predict(X_test_res)

print("Confusion Matrix:")
print(confusion_matrix(y_test_res, y_pred_smote))
print("Classification Report:")
print(classification_report(y_test_res, y_pred_smote))
print("Accuracy Score:", accuracy_score(y_test_res, y_pred_smote))

# ====================== 4. LOGISTIC REGRESSION WITH SMOTE + SCALING ======================
print("\n=== 4. Logistic Regression with SMOTE + Feature Scaling ===")
X_train_res_s, X_test_res_s, y_train_res_s, y_test_res_s = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42
)

scaler_res = StandardScaler()
X_train_res_scaled = scaler_res.fit_transform(X_train_res_s)
X_test_res_scaled = scaler_res.transform(X_test_res_s)

model_smote_scaled = LogisticRegression()
model_smote_scaled.fit(X_train_res_scaled, y_train_res_s)
y_pred_smote_scaled = model_smote_scaled.predict(X_test_res_scaled)

print("Confusion Matrix:")
print(confusion_matrix(y_test_res_s, y_pred_smote_scaled))
print("Classification Report:")
print(classification_report(y_test_res_s, y_pred_smote_scaled))
print("Accuracy Score:", accuracy_score(y_test_res_s, y_pred_smote_scaled))